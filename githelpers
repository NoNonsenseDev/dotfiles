#!/bin/bash

LOG_HASH="%C(yellow)%h%Creset"
LOG_RELATIVE_TIME="%Cgreen(%ar)%Creset"
LOG_AUTHOR="%C(bold blue)<%an>%Creset"
LOG_REFS="%C(bold red)%d%Creset"
LOG_SUBJECT="%s"

LOG_FORMAT="$LOG_HASH $LOG_RELATIVE_TIME}$LOG_AUTHOR}$LOG_REFS $LOG_SUBJECT"

ANSI_BLACK='\033[30m'
ANSI_BLACK_BOLD='\033[0;30;1m'
ANSI_RED='\033[31m'
ANSI_RED_BOLD='\033[0;31;1m'
ANSI_GREEN='\033[32m'
ANSI_GREEN_BOLD='\033[0;32;1m'
ANSI_YELLOW='\033[33m'
ANSI_YELLOW_BOLD='\033[0;33;1m'
ANSI_BLUE='\033[34m'
ANSI_BLUE_BOLD='\033[0;34;1m'
ANSI_MAGENTA='\033[35m'
ANSI_MAGENTA_BOLD='\033[0;35;1m'
ANSI_CYAN='\033[36m'
ANSI_CYAN_BOLD='\033[0;36;1m'
ANSI_WHITE='\033[37m'
ANSI_WHITE_BOLD='\033[0;37;1m'
ANSI_RESET='\033[0m'

pretty_git_log() {
  git log --graph --pretty="tformat:${LOG_FORMAT}" $* | pretty_git_format
}

pretty_git_format() {
  # Replace (2 years ago) with (2 years)
  sed -Ee 's/(^[^<]*) ago\)/\1)/' |
  # Replace (2 years, 5 months) with (2 years)
  sed -Ee 's/(^[^<]*), [[:digit:]]+ .*months?\)/\1)/' |
  # Line columns up based on } delimiter
  column -s '}' -t |
  # Color merge commits specially
  sed -Ee "s/(Merge (branch|remote-tracking branch|pull request) .*$)/$(printf $ANSI_RED)\1$(printf $ANSI_RESET)/" |
  # Page only if we're asked to.
  if [ -n "$GIT_NO_PAGER" ]; then
    cat
  else
    # Page only if needed.
    less --quit-if-one-screen --no-init --RAW-CONTROL-CHARS --chop-long-lines
  fi
}

merged_branches() {
  comm -12 \
    <(local_merged_branches | remove_origin | remove_master) \
    <(remote_merged_branches | remove_origin | remove_master)
}

local_merged_branches() {
  git branch --merged | remove_origin | remove_master | sort
}

remote_merged_branches() {
  git branch -r --merged | remove_origin | remove_master | sort
}

remove_origin() {
  while read br; do
    echo "${br}" | sed 's@origin/@@g'
  done
}

remove_master() {
  while read br; do
    echo "${br}" | egrep -v master
  done
}

delete_branches() {
  while read br; do
    git branch -d "${br}"
    git push origin --delete "${br}"
  done
}

function last_tag() {
  git describe --abbrev=0 --tags
}

function github_repository() {
  git remote -v | grep fetch | awk '{print $2}' | cut -d ":" -f2 | cut -d "." -f1
}

function list_of_prs() {
  prs-merged-since --tag $(last_tag) --repo $(github_repository) --format markdown | sed 's/####/-/g' | sed '/^$/d'
}

function release() {
  local version_number="${1}"
  local current_version="$(last_tag)"
  release_version="$(semver bump ${version_number} ${current_version})"
  release_message=$(printf "Release ${release_version}\n\n$(git prs)")
  hub release create --browse --message "${release_message}" "${release_version}"
}
