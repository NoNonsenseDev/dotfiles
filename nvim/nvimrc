if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'preservim/nerdtree'
Plug 'preservim/nerdcommenter'
Plug 'junegunn/vim-easy-align'
Plug 'janko-m/vim-test'
Plug 'SirVer/ultisnips'
Plug 'airblade/vim-rooter'
Plug 'schickling/vim-bufonly'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-abolish'
Plug 'pbrisbin/vim-mkdir'
Plug 'vim-scripts/matchit.zip'
Plug 'ntpeters/vim-better-whitespace'
Plug 'rakr/vim-one' " Adaptation of one-light and one-dark colorschemes for Vim
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'roman/golden-ratio'
Plug 'pangloss/vim-javascript'
Plug 'peitalin/vim-jsx-typescript'
Plug 'leafgarland/typescript-vim'
Plug 'moll/vim-node'
Plug 'hashivim/vim-terraform'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-rails'
call plug#end()

filetype plugin indent on

let mapleader = ","

set exrc
set secure
set number
set nobackup
set nowritebackup
set noswapfile
set laststatus=2 " Always display the status line
set autoindent
set smartindent
set expandtab
set shiftwidth=2
set softtabstop=2
set scrolloff=3
set sidescrolloff=5
set backspace=indent,eol,start
set termguicolors
if has("macunix")
  set clipboard=unnamed
else
  set clipboard=unnamedplus
endif

set background=light
colorscheme one

set ignorecase
set smartcase
set lazyredraw
set textwidth=120
set colorcolumn=120
set encoding=utf8

" Specify the behavior when switching between buffers
set switchbuf=useopen,usetab,vsplit
set stal=2

set statusline=
set statusline+=%#PmenuSel#
set statusline+=%{get(g:,'coc_git_status','')}%{get(b:,'coc_git_status','')}
set statusline+=%#LineNr#
set statusline+=\ %f
set statusline+=%m
set statusline+=%=
set statusline+=%#CursorColumn#
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=\ %l:%c

let g:markdown_fenced_languages = ['python', 'bash=sh', 'html', 'css', 'json', 'javascript', 'js=javascript', 'yaml']

let g:rooter_cd_cmd="lcd"
let g:rooter_resolve_links = 1
let g:rooter_patterns = [
\ 'package.json',
\ 'Gemfile',
\ 'venv/',
\ '.git',
\ '.git/',
\]

let g:dispatch_tmux_height = "15"

let g:better_whitespace_enabled = 1
let g:strip_whitespace_on_save = 1

let g:UltiSnipsSnippetDirectories = [$HOME.'/.dotfiles/UltiSnips']

" coc.nvim specific
let g:coc_global_extensions = [
  \'coc-sql',
  \'coc-json',
  \'coc-tsserver',
  \'coc-yaml',
  \'coc-pyright',
  \'coc-pydocstring',
  \'coc-emoji',
  \'coc-snippets',
  \'coc-lists',
  \'coc-syntax',
  \'coc-docker',
  \'coc-git',
  \'coc-go',
  \'coc-vimlsp',
  \'coc-omni',
  \'coc-solargraph',
\]

" if hidden is not set, TextEdit might fail.
set hidden
" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.<q-args>, 1,
  \   fzf#vim#with_preview(), <bang>0)

" Navigation
nnoremap <silent> <space><Leader> :<C-u>Files<CR>
nnoremap <silent> <space>m        :<C-u>Rg<CR>
nnoremap <silent> <space>d        :<C-u>GFiles?<CR>
nnoremap <silent> <space>.        :<C-u>CocList buffers<CR>
nnoremap <silent> <space>/        :<C-u>BLines<CR>

" Fix gx on Mac to open links, images etc with `open`
nmap <silent> gx :!open <cfile><cr>

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

vmap <leader>f <Plug>(coc-format-selected)
nmap <leader>f <Plug>(coc-format-selected)

nmap <silent> ]e <Plug>(coc-diagnostic-next)
nmap <silent> [e <Plug>(coc-diagnostic-prev)

" Remap keys for git commands
nmap <silent> ]c <Plug>(coc-git-nextchunk)
nmap <silent> [c <Plug>(coc-git-prevchunk)
nmap <silent> <Leader>hp <Plug>(coc-git-chunkinfo)
nmap <silent> <Leader>hb <Plug>(coc-git-commit)
nmap <silent> <Leader>hr :<C-u>CocCommand git.chunkUndo<CR>
nmap <silent> <Leader>hs :<C-u>CocCommand git.chunkStage<CR>

nmap <F2> <Plug>(coc-rename)
" Remap keys for applying codeAction to the current buffer.
nmap <leader>da <Plug>(coc-codeaction-line)
xmap <silent> da <Plug>(coc-codeaction-selected)
" Apply AutoFix to problem on the current line.
nmap <leader>do <Plug>(coc-fix-current)
" Run the Code Lens action on the current line.
nmap <leader>dl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ CheckBackspace() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction


" Visual mode pressing * or # searches for the current selection
vnoremap <silent> * :<C-u>call GetVisualSelection()<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call GetVisualSelection()<CR>?<C-R>=@/<CR><CR>
vnoremap <space>m :<C-u>call GetVisualSelection()<CR>:Rg <C-R>=@/<CR><CR>

let test#strategy = "dispatch"
nnoremap <Leader>rf :TestFile<CR>
nnoremap <Leader>rs :TestNearest<CR>
nnoremap <Leader>rl :TestLast<CR>
nnoremap <Leader>ra :TestSuite<CR>

nnoremap <Leader>nn :NERDTreeToggle<CR>
nnoremap <Leader>nf :NERDTreeFind<CR>

let g:NERDSpaceDelims = 1
let g:NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeWinSize=60

xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

imap kj <Esc>

" Yank current file path relative to the project root
nnoremap <Leader>yf :let @+=expand("%")<CR>
" Yank current file path with line number relative to the project root
nnoremap <Leader>yl :let @+=expand("%") . ':' . line(".")<CR>

" n always search forward and N backward
nnoremap <expr> n  'Nn'[v:searchforward]
nnoremap <expr> N  'nN'[v:searchforward]

" Close all the buffers except the current buffer.
map <Leader>bo :BufOnly<CR>
" Close the current buffer
map <silent> <Leader>bd :bd<CR>
" Close all the buffers
map <Leader>ba :bufdo bd<CR>
map <Leader>. :bnext<CR>
map <Leader>m :bprevious<CR>

let $FZF_DEFAULT_COMMAND = "fd --type f --follow --ignore-case"
if exists('$TMUX')
  let g:fzf_layout = { 'tmux': '-p80%,70%' }
else
  let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.7 } }
endif
let g:fzf_history_dir = '~/.local/share/fzf-history'
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }


" set to 1, the nvim will auto close current preview window when change
" from markdown buffer to another buffer
" default: 1
let g:mkdp_auto_close = 0

" set to 1, the vim will refresh markdown when save the buffer or
" leave from insert mode, default 0 is auto refresh markdown as you edit or
" move the cursor
" default: 0
let g:mkdp_refresh_slow = 1

" specify browser to open preview page
" default: ''

" options for markdown render
" mkit: markdown-it options for render
" katex: katex options for math
" uml: markdown-it-plantuml options
" maid: mermaid options
" disable_sync_scroll: if disable sync scroll, default 0
" sync_scroll_type: 'middle', 'top' or 'relative', default value is 'middle'
"   middle: mean the cursor position alway show at the middle of the preview page
"   top: mean the vim top viewport alway show at the top of the preview page
"   relative: mean the cursor position alway show at the relative positon of the preview page
" hide_yaml_meta: if hide yaml metadata, default is 1
" sequence_diagrams: js-sequence-diagrams options
" content_editable: if enable content editable for preview page, default: v:false
" disable_filename: if disable filename header for preview page, default: 0
let g:mkdp_preview_options = {
    \ 'mkit': {},
    \ 'katex': {},
    \ 'uml': {},
    \ 'maid': {},
    \ 'disable_sync_scroll': 0,
    \ 'sync_scroll_type': 'middle',
    \ 'hide_yaml_meta': 1,
    \ 'sequence_diagrams': {},
    \ 'flowchart_diagrams': {},
    \ 'content_editable': v:false,
    \ 'disable_filename': 0
    \ }

" Terraform
let g:terraform_align=1
let g:terraform_fmt_on_save=1


augroup langs
  autocmd!
  autocmd BufNewFile,BufRead Dockerfile* set syntax=dockerfile
  autocmd FileType python setlocal tabstop=4 softtabstop=4 shiftwidth=4 textwidth=120 fileformat=unix cinwords=if,elif,else,for,while,try,except,finally,def,class,with
  autocmd FileType yaml setlocal tabstop=2 softtabstop=2 shiftwidth=2 textwidth=120 fileformat=unix
  autocmd FileType go setlocal noexpandtab tabstop=4 shiftwidth=4
  autocmd BufWritePre *.go :call CocActionAsync('runCommand', 'editor.action.organizeImport')
  autocmd FileType go nmap gta :CocCommand go.tags.add
  autocmd FileType go nmap gtx :CocCommand go.tags.clear<CR>
  autocmd FileType go nmap gtg :CocCommand go.test.generate.exported<CR>
  autocmd FileType scss setl iskeyword+=@-@
  " Setup formatexpr specified filetype(s).
  autocmd FileType javascript,typescript,json,go,python,html,css,dockerfile,scss setl formatexpr=CocAction('formatSelected')
augroup end

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')


augroup mygroup
  autocmd!
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  autocmd CompleteDone * if pumvisible() == 0 | pclose | endif
augroup end


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! GetVisualSelection() range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", "\\/.*'$^~[]")
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction
