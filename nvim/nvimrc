if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'neovim/nvim-lspconfig'
Plug 'williamboman/nvim-lsp-installer'
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-nvim-lua'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/cmp-nvim-lsp-signature-help'
Plug 'onsails/lspkind.nvim'
Plug 'b0o/schemastore.nvim'
Plug 'SirVer/ultisnips'
Plug 'quangnguyen30192/cmp-nvim-ultisnips'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-treesitter/nvim-treesitter-context'
Plug 'nvim-treesitter/nvim-treesitter-textobjects'
Plug 'kyazdani42/nvim-web-devicons'
Plug 'kyazdani42/nvim-tree.lua'
Plug 'lewis6991/gitsigns.nvim'
Plug 'akinsho/bufferline.nvim'
Plug 'nvim-lualine/lualine.nvim'
Plug 'lukas-reineke/indent-blankline.nvim'
Plug 'lewis6991/impatient.nvim'
Plug 'notjedi/nvim-rooter.lua'
Plug 'jose-elias-alvarez/null-ls.nvim'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'kdheepak/lazygit.nvim'
Plug 'ibhagwan/fzf-lua', { 'branch': 'main' }
Plug 'folke/tokyonight.nvim', { 'branch': 'main'  }

Plug 'preservim/nerdcommenter'
Plug 'junegunn/vim-easy-align'
Plug 'janko-m/vim-test'
Plug 'schickling/vim-bufonly'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-abolish'
Plug 'pbrisbin/vim-mkdir'
Plug 'vim-scripts/matchit.zip'
"Plug 'ntpeters/vim-better-whitespace'
Plug 'pangloss/vim-javascript'
Plug 'peitalin/vim-jsx-typescript'
Plug 'leafgarland/typescript-vim'
Plug 'moll/vim-node'
Plug 'hashivim/vim-terraform'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-bundler'
Plug 'editorconfig/editorconfig-vim'
Plug 'github/copilot.vim'
call plug#end()

lua require("impatient")
lua require("user")

let g:copilot_no_tab_map = v:true
imap <expr> <Plug>(vimrc:dummy-copilot-tab) copilot#Accept("\<Tab>")

"let g:better_whitespace_enabled = 1
"let g:strip_whitespace_on_save = 1

" Git
nnoremap <space>d <cmd>lua require('fzf-lua').git_status()<cr>
nnoremap <leader>b <cmd>lua require('fzf-lua').git_branches({ winopts = { height=0.6 }})<cr>
nnoremap <silent> <leader>gg <cmd>LazyGit<cr>
nnoremap <silent> <leader>gf <cmd>LazyGitFilterCurrentFile<cr>

nnoremap <silent><C-Up> <cmd>resize -6<cr>
nnoremap <silent><C-Down> <cmd>resize +6<cr>
nnoremap <silent><C-Left> <cmd>vertical resize -6<cr>
nnoremap <silent><C-Right> <cmd>vertical resize +6<cr>

" Navigation
nnoremap <C-d> 8jzz<cr>
nnoremap <C-u> 8kzz<cr>

nnoremap <space>c <cmd>lua require('fzf-lua').resume()<cr>
nnoremap <space><leader> <cmd>lua require('fzf-lua').files({ winopts = { row = 0.5, height = 0.5 }})<cr>
nnoremap <space><space><leader> <cmd>lua require('fzf-lua').files({ cwd='%:h', winopts = { row = 0.5, height = 0.5 } })<cr>
nnoremap <space>m <cmd>lua require('fzf-lua').live_grep_native()<cr>
nnoremap <space><space>m <cmd>lua require('fzf-lua').live_grep_native({ cwd='%:h' })<cr>
vnoremap <space>m <cmd>lua require('fzf-lua').grep_visual()<cr>
vnoremap <space><space>m <cmd>lua require('fzf-lua').grep_visual({ cwd='%:h' })<cr>
nnoremap <space>w <cmd>lua require('fzf-lua').grep_cword()<cr>
nnoremap <space><space>w <cmd>lua require('fzf-lua').grep_cword({ cwd='%:h' })<cr>
nnoremap <space>. <cmd>lua require('fzf-lua').buffers({ winopts = { row = 0.5, width = 0.6, height = 0.33 } })<cr>
nnoremap <space>/ <cmd>lua require('fzf-lua').blines()<cr>
nnoremap <space>o <cmd>lua require('fzf-lua').lsp_document_symbols({ winopts = { width = 0.6 } })<cr>
nnoremap gr <cmd>lua require('fzf-lua').lsp_references({ winopts = { height=0.6 } })<cr>
nnoremap gd <cmd>lua require('fzf-lua').lsp_definitions({ jump_to_single_result = true, winopts = { height=0.6 } })<cr>
nnoremap gD <cmd>lua require('fzf-lua').lsp_declarations({ jump_to_single_result = true, winopts = { height=0.6 } })<cr>
nnoremap gi <cmd>lua require('fzf-lua').lsp_implementations({ winopts = { height=0.6 } })<cr>
nnoremap gt <cmd>lua require('fzf-lua').lsp_typedefs({ winopts = { height=0.6 }})<cr>
nnoremap <leader>da <cmd>lua require('fzf-lua').lsp_code_actions({ winopts = { height=0.6 }})<cr>

" Fix gx on Mac to open links, images etc with `open`
nmap <silent> gx :!open <cfile><cr>

" vmap <leader>f <Plug>(coc-format-selected)
" nmap <leader>f <Plug>(coc-format-selected)

" Visual mode pressing * or # searches for the current selection
vnoremap <silent> * :<C-u>call GetVisualSelection()<cr>/<C-R>=@/<cr><cr>
vnoremap <silent> # :<C-u>call GetVisualSelection()<cr>?<C-R>=@/<cr><cr>

let g:dispatch_tmux_height = "15"

let test#strategy = "dispatch"
nnoremap <leader>rf <cmd>TestFile<cr>
nnoremap <leader>rs <cmd>TestNearest<cr>
nnoremap <leader>rl <cmd>TestLast<cr>
nnoremap <leader>ra <cmd>TestSuite<cr>

nnoremap <leader>nn <cmd>NvimTreeToggle<cr>
nnoremap <leader>nf <cmd>NvimTreeFindFile<cr>

xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

imap kj <Esc>

" Yank current file path relative to the project root
nnoremap <leader>yf :let @+=expand("%")<cr>
" Yank current file path with line number relative to the project root
nnoremap <leader>yl :let @+=expand("%") . ':' . line(".")<cr>

" n always search forward and N backward
nnoremap <expr> n  'Nn'[v:searchforward]
nnoremap <expr> N  'nN'[v:searchforward]

" Close all the buffers except the current buffer.
map <leader>bo :BufOnly<cr>
" Close the current buffer
map <silent> <leader>bd :bd<cr>
" Close all the buffers
map <leader>ba :bufdo bd<cr>
map <leader>. :bnext<cr>
map <leader>m :bprevious<cr>

augroup langs
  autocmd!
  autocmd BufNewFile,BufRead Dockerfile* set filetype=dockerfile
  autocmd BufNewFile,BufRead Brewfile set filetype=ruby
  "autocmd FileType python setlocal tabstop=4 softtabstop=4 shiftwidth=4 textwidth=120 fileformat=unix cinwords=if,elif,else,for,while,try,except,finally,def,class,with
  "autocmd FileType yaml setlocal tabstop=2 softtabstop=2 shiftwidth=2 textwidth=120 fileformat=unix
  "autocmd FileType go setlocal noexpandtab tabstop=4 shiftwidth=4
augroup end

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! GetVisualSelection() range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", "\\/.*'$^~[]")
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction
