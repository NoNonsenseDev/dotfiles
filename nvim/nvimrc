if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'neovim/nvim-lspconfig'
Plug 'williamboman/nvim-lsp-installer'
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-nvim-lua'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/cmp-nvim-lsp-signature-help'
Plug 'onsails/lspkind.nvim'
Plug 'b0o/schemastore.nvim'
Plug 'SirVer/ultisnips'
Plug 'quangnguyen30192/cmp-nvim-ultisnips'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-treesitter/nvim-treesitter-context'
Plug 'nvim-treesitter/nvim-treesitter-textobjects'
Plug 'kyazdani42/nvim-web-devicons'
Plug 'kyazdani42/nvim-tree.lua'
Plug 'lewis6991/gitsigns.nvim'
Plug 'akinsho/bufferline.nvim'
Plug 'nvim-lualine/lualine.nvim'
Plug 'lukas-reineke/indent-blankline.nvim'
Plug 'lewis6991/impatient.nvim'
Plug 'notjedi/nvim-rooter.lua'
Plug 'jose-elias-alvarez/null-ls.nvim'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'kdheepak/lazygit.nvim'
Plug 'ibhagwan/fzf-lua', { 'branch': 'main' }

Plug 'preservim/nerdcommenter'
Plug 'junegunn/vim-easy-align'
Plug 'janko-m/vim-test'
Plug 'schickling/vim-bufonly'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-abolish'
Plug 'pbrisbin/vim-mkdir'
Plug 'vim-scripts/matchit.zip'
Plug 'ntpeters/vim-better-whitespace'
Plug 'rakr/vim-one' " Adaptation of one-light and one-dark colorschemes for Vim
Plug 'pangloss/vim-javascript'
Plug 'peitalin/vim-jsx-typescript'
Plug 'leafgarland/typescript-vim'
Plug 'moll/vim-node'
Plug 'hashivim/vim-terraform'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-bundler'
Plug 'editorconfig/editorconfig-vim'
Plug 'github/copilot.vim'
call plug#end()

set completeopt=menu,menuone,noselect

lua require("impatient")
lua require("user")

filetype plugin indent on

let mapleader = ","

set splitbelow
set exrc
set secure
set number
set nobackup
set nowritebackup
set noswapfile
set laststatus=2 " Always display the status line
set autoindent
set smartindent
set expandtab
set shiftwidth=2
set softtabstop=2
set scrolloff=3
set sidescrolloff=5
set scroll=8
set backspace=indent,eol,start
set termguicolors
if has("macunix")
  set clipboard=unnamed
else
  set clipboard=unnamedplus
endif

set background=light
colorscheme one

set ignorecase
set smartcase
set lazyredraw
set textwidth=120
set colorcolumn=120
set encoding=utf8

" Specify the behavior when switching between buffers
set switchbuf=useopen,usetab,vsplit
set stal=2

let g:markdown_fenced_languages = ['python', 'bash=sh', 'html', 'css', 'json', 'javascript', 'js=javascript', 'yaml', 'dockerfile']

let g:better_whitespace_enabled = 1
let g:strip_whitespace_on_save = 1

let g:UltiSnipsSnippetDirectories = [$HOME.'/.dotfiles/UltiSnips']

" if hidden is not set, TextEdit might fail.
set hidden
" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Git
nnoremap <space>d <cmd>lua require('fzf-lua').git_status()<cr>
nnoremap <leader>b <cmd>lua require('fzf-lua').git_branches()<cr>
nnoremap <silent> <leader>gg <cmd>LazyGit<cr>
nnoremap <silent> <leader>gf <cmd>LazyGitFilterCurrentFile<cr>

nnoremap <silent><C-Up> <cmd>resize -2<cr>
nnoremap <silent><C-Down> <cmd>resize +2<cr>
nnoremap <silent><C-Left> <cmd>vertical resize -2<cr>
nnoremap <silent><C-Right> <cmd>vertical resize +2<cr>

nnoremap ]c <cmd>lua require('gitsigns').next_hunk()<cr>
nnoremap [c <cmd>lua require('gitsigns').prev_hunk()<cr>
nnoremap <leader>ht <cmd>lua require('gitsigns').toggle_signs()<cr>
nnoremap <leader>hp <cmd>lua require('gitsigns').preview_hunk()<cr>
nnoremap <leader>hb <cmd>lua require('gitsigns').blame_line()<cr>
nnoremap <leader>hr <cmd>lua require('gitsigns').reset_hunk()<cr>
nnoremap <leader>hs <cmd>lua require('gitsigns').stage_hunk()<cr>
nnoremap <leader>hu <cmd>lua require('gitsigns').undo_stage_hunk()<cr>
nnoremap <leader>hR <cmd>lua require('gitsigns').reset_buffer()<cr>


" Navigation
nnoremap <C-d> 8jzz<cr>
nnoremap <C-u> 8kzz<cr>

nnoremap <space>c <cmd>lua require('fzf-lua').resume()<cr>
nnoremap <space><leader> <cmd>lua require('fzf-lua').files()<cr>
nnoremap <space><space><leader> <cmd>lua require('fzf-lua').files({ cwd='%:h' })<cr>
nnoremap <space>m <cmd>lua require('fzf-lua').live_grep_native()<cr>
nnoremap <space><space>m <cmd>lua require('fzf-lua').live_grep_native({ cwd='%:h' })<cr>
vnoremap <space>m <cmd>lua require('fzf-lua').grep_visual()<cr>
vnoremap <space><space>m <cmd>lua require('fzf-lua').grep_visual({ cwd='%:h' })<cr>
nnoremap <space>w <cmd>lua require('fzf-lua').grep_cword()<cr>
nnoremap <space><space>w <cmd>lua require('fzf-lua').grep_cword({ cwd='%:h' })<cr>
nnoremap <space>. <cmd>lua require('fzf-lua').buffers({ winopts = { width = 0.6, height = 0.33 } })<cr>
nnoremap <space>/ <cmd>lua require('fzf-lua').blines()<cr>
nnoremap <space>o <cmd>lua require('fzf-lua').lsp_document_symbols({ winopts = { width = 0.6 } })<cr>
nnoremap gr <cmd>lua require('fzf-lua').lsp_references({ winopts = { height=0.6 } })<cr>
nnoremap gd <cmd>lua require('fzf-lua').lsp_definitions({ jump_to_single_result = true, winopts = { height=0.6 } })<cr>
nnoremap gD <cmd>lua require('fzf-lua').lsp_declarations({ jump_to_single_result = true, winopts = { height=0.6 } })<cr>
nnoremap gi <cmd>lua require('fzf-lua').lsp_implementations({ winopts = { height=0.6 } })<cr>
nnoremap gt <cmd>lua require('fzf-lua').lsp_typedefs({ winopts = { height=0.6 }})<cr>
nnoremap <leader>da <cmd>lua require('fzf-lua').lsp_code_actions({ winopts = { height=0.6 }})<cr>

" Fix gx on Mac to open links, images etc with `open`
nmap <silent> gx :!open <cfile><cr>

" vmap <leader>f <Plug>(coc-format-selected)
" nmap <leader>f <Plug>(coc-format-selected)

" Visual mode pressing * or # searches for the current selection
vnoremap <silent> * :<C-u>call GetVisualSelection()<cr>/<C-R>=@/<cr><cr>
vnoremap <silent> # :<C-u>call GetVisualSelection()<cr>?<C-R>=@/<cr><cr>

let g:dispatch_tmux_height = "15"

let test#strategy = "dispatch"
nnoremap <leader>rf <cmd>TestFile<cr>
nnoremap <leader>rs <cmd>TestNearest<cr>
nnoremap <leader>rl <cmd>TestLast<cr>
nnoremap <leader>ra <cmd>TestSuite<cr>

nnoremap <leader>nn <cmd>NvimTreeToggle<cr>
nnoremap <leader>nf <cmd>NvimTreeFindFile<cr>

xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

imap kj <Esc>

" Yank current file path relative to the project root
nnoremap <leader>yf :let @+=expand("%")<cr>
" Yank current file path with line number relative to the project root
nnoremap <leader>yl :let @+=expand("%") . ':' . line(".")<cr>

" n always search forward and N backward
nnoremap <expr> n  'Nn'[v:searchforward]
nnoremap <expr> N  'nN'[v:searchforward]

" Close all the buffers except the current buffer.
map <leader>bo :BufOnly<cr>
" Close the current buffer
map <silent> <leader>bd :bd<cr>
" Close all the buffers
map <leader>ba :bufdo bd<cr>
map <leader>. :bnext<cr>
map <leader>m :bprevious<cr>

" set to 1, the nvim will auto close current preview window when change
" from markdown buffer to another buffer
" default: 1
let g:mkdp_auto_close = 0

" set to 1, the vim will refresh markdown when save the buffer or
" leave from insert mode, default 0 is auto refresh markdown as you edit or
" move the cursor
" default: 0
let g:mkdp_refresh_slow = 1

" specify browser to open preview page
" default: ''

" options for markdown render
" mkit: markdown-it options for render
" katex: katex options for math
" uml: markdown-it-plantuml options
" maid: mermaid options
" disable_sync_scroll: if disable sync scroll, default 0
" sync_scroll_type: 'middle', 'top' or 'relative', default value is 'middle'
"   middle: mean the cursor position alway show at the middle of the preview page
"   top: mean the vim top viewport alway show at the top of the preview page
"   relative: mean the cursor position alway show at the relative positon of the preview page
" hide_yaml_meta: if hide yaml metadata, default is 1
" sequence_diagrams: js-sequence-diagrams options
" content_editable: if enable content editable for preview page, default: v:false
" disable_filename: if disable filename header for preview page, default: 0
let g:mkdp_preview_options = {
    \ 'mkit': {},
    \ 'katex': {},
    \ 'uml': {},
    \ 'maid': {},
    \ 'disable_sync_scroll': 0,
    \ 'sync_scroll_type': 'middle',
    \ 'hide_yaml_meta': 1,
    \ 'sequence_diagrams': {'theme': 'simple'},
    \ 'flowchart_diagrams': {},
    \ 'content_editable': v:false,
    \ 'disable_filename': 0
    \ }

" Terraform
let g:terraform_align=1
let g:terraform_fmt_on_save=1


augroup langs
  autocmd!
  autocmd BufNewFile,BufRead Dockerfile* set filetype=dockerfile
  autocmd BufNewFile,BufRead Brewfile set filetype=ruby
  "autocmd FileType python setlocal tabstop=4 softtabstop=4 shiftwidth=4 textwidth=120 fileformat=unix cinwords=if,elif,else,for,while,try,except,finally,def,class,with
  "autocmd FileType yaml setlocal tabstop=2 softtabstop=2 shiftwidth=2 textwidth=120 fileformat=unix
  "autocmd FileType go setlocal noexpandtab tabstop=4 shiftwidth=4
augroup end

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! GetVisualSelection() range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", "\\/.*'$^~[]")
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction
