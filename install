#!/usr/bin/env python3

import os
from pathlib import Path
from subprocess import Popen, check_output
from typing import Final

SYM_LINKS: Final[list[tuple[str, str]]] = [
    ("~/.ripgreprc", "ripgreprc"),
    ("~/.gitconfig", "gitconfig"),
    ("~/.psqlrc", "psqlrc"),
    ("~/.bash_aliases", "bash_aliases"),
    ("~/.tmux.conf", "tmux.conf"),
    ("~/.config/pgcli/config", "pgcli/config"),
    ("~/.config/nvim", "nvim"),
    ("~/.config/lazygit/config.yml", "lazygit.yml"),
    ("~/Library/Application Support/jesseduffield/lazygit/config.yml", "lazygit.yml"),
    ("~/.config/bat/config", "bat/config"),
    ("~/.config/starship.toml", "starship.toml"),
]

TEMPLATES: Final[list[tuple[str, str]]] = [
    ("~/.config/alacritty/alacritty.yml", "alacritty.yml"),
]

DIRECTORIES: Final[list[str]] = [
    "~/code",
]

DOTFILES: Path = Path("~/.dotfiles").expanduser()

SHELL_CMDS: Final[list[str]] = [
    "brew bundle --no-lock",
    ". $(brew --prefix)/opt/nvm/nvm.sh && nvm install node",
    "./pip_install",
    "$(brew --prefix)/opt/fzf/install",
]

BASHRC_LINES: Final[list[str]] = [
    'eval "$(starship init bash)"',
    "source ~/.dotfiles/bashrc",
    "[ -f ~/.fzf.bash ] && source ~/.fzf.bash",
    "[ -f ~/.bash_aliases ] && source ~/.bash_aliases",
]

BASH_PROFILE_LINES: Final[list[str]] = [
    "source ~/.bashrc",
    "source ~/.dotfiles/profile",
    'eval "$(pyenv init --path)"',
    'eval "$(gh completion -s bash)"',
]


def main():
    os.environ["HOMEBREW_PREFIX"] = check_output(["brew", "--prefix"]).strip().decode()

    for cmd in SHELL_CMDS:
        process = Popen(
            cmd,
            cwd=DOTFILES,
            shell=True,
            executable=os.getenv("SHELL"),
        )
        process.wait(timeout=60)

    for (src, dst) in SYM_LINKS:
        src, dst = Path(src).expanduser(), DOTFILES.joinpath(dst)
        src.parent.mkdir(parents=True, exist_ok=True)
        print(f"ln -s {src} {dst}")
        src.unlink(missing_ok=True)
        src.symlink_to(dst, target_is_directory=dst.is_dir())

    for (dst, template) in TEMPLATES:
        dst, template = Path(dst).expanduser(), DOTFILES.joinpath(template)
        dst.parent.mkdir(parents=True, exist_ok=True)
        dst.unlink(missing_ok=True)
        process = Popen(
            f'envsubst < "{template}" > "{dst}"',
            cwd=DOTFILES,
            shell=True,
            executable=os.getenv("SHELL"),
        )
        process.wait(timeout=60)

    for directory in DIRECTORIES:
        print(f"mkdir -p {directory}")
        Path(directory).expanduser().mkdir(parents=True, exist_ok=True)

    bashrc = Path("~/.bashrc").expanduser()
    bashrc_content = bashrc.read_text()
    with bashrc.open(mode="a") as f:
        for bashrc_line in BASHRC_LINES:
            if bashrc_line not in bashrc_content:
                f.write(bashrc_line)

    profile = Path("~/.bash_profile").expanduser()
    profile_content = profile.read_text()
    with profile.open(mode="a") as f:
        for profile_line in BASH_PROFILE_LINES:
            if profile_line not in profile_content:
                f.write(profile_line)


if __name__ == "__main__":
    main()
